@startuml RenovIUTApp

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods

class RenovIUTApp 
{
    + {static} main(args: String[])
}

package vues 
{
    package noeuds 
    {
        class VueBatiment 
        {
            - batimentSelectionne : String
            + afficher_options()
            + recruter_professeur()
            + licencier_professeur()
            + allumer_chauffage()
            + eteindre_chauffage()
            + recruter_agent_maintenance()
            + licencier_agent_maintenance()
            + lancer Evenement()
            + afficher_info_batiment()
        }

        class Statistique
        {
            + afficher_budget()
            + afficher_satisfaction()
            + afficher_satisfaction_proffesseur()
            + afficher_satisfaction_etudiant()
            + afficher_taux_reussite()
        }

        class ChoixEvenement()
        {
            - choixListe : String[*]
            - choixSelectionner : Integer
            + <<create>> ChoixEvenement()
            + definirChoix(choix : Integer)
            + envoyerChoix(choix : Integer)
            
        }
    }

    package scenes 
    {
        class Demarrage 
        {
            + afficher_ecran_demarrage()
            + choix_difficulte()
            + lancer_jeu()
        }

        class Menu 
        {
            + afficher_menu()
            + commencer_jeu(difficulte: Difficulte)
            + quitter_jeu()
        }

        class FinDeJeu 
        {
            + afficher_fin_de_jeu()
            + redemarrer_jeu()
        }
    }
}

package controleurs 
{
    class GestionTemps 
    {
        - annee : Integer
        - mois : Integer
        - jour : Integer
        - difficulte : Difficulte
        + <<Créer>> GestionTemps(difficulte: Difficulte)
        + tic()
        + evenement_aleatoire()
        + obtenir_saison()
        + fin_annee()
        + lancer_election()
        + pause(p : Bool)
    }

    package etablissement 
    {
        class Enseignement 
        {
            + recruter_professeur(dept : String)
            + licencier_professeur(dept : String)
            + peupler()
        }

        class Etude 
        {
            + peupler_annee()
            + peupler_promo(dept : String, annee : Integer)
            + evaluer()
            + annee_suivante()
        }
    }

    package gestion 
    {
        class Financement 
        {
            + supprimer_fond_par_id(i : Integer)
            + supprimer_fond_par_source(source : String)
            + calculer_montant_par_dept(dept : String) : Real
            + calculer_total() : Real
            + ajuster_fonds(difficulte: Difficulte)
        }

        abstract class Evenement 
        {

            + planifier Evenement()
        }

        class Planifiee 
        {
            + planifier_pour_annee_prochaine()
        }

        class Urgente 
        {
            + executer Evenement_urgente()
        }
    }

    class Election 
    {
        + election_gagnee() : Bool
        + taux_popularite() : Real
        + taux_popularite_par_dept(dept : String) : Real
        + taux_popularite_professeur() : Real
        + taux_popularite_professeur_par_dept(dept : String) : Real
        + taux_popularite_etudiant() : Real
        + taux_popularite_etudiant_par_dept(dept : String) : Real
    }
}

package modeles 
{
    class Challenge {
      - time (jours : Integer)
      - isReproductible (reproductible : Boolean)
      - isCallingForAction (needsAction : Boolean)
      - area (code : String)
    }

    package batiment 
    {
        abstract class Batiment 
        {
            - age : Integer
            - isolation : Integer
            - surface : Integer
            - chauffage : Bool
            - nbAgentsMaintenance : Integer
            + obtenir_code() : String
        }

        class Informatique 
        {
            + <<créer>> Informatique()
            + fonctionnalite_specifique_informatique()
        }

        class Communication 
        {
            + <<créer>> Communication()
            + fonctionnalite_specifique_communication()
        }

        class Marketing 
        {
            + <<créer>> Marketing()
            + fonctionnalite_specifique_marketing()
        }

        class Chimie 
        {
            + <<créer>> Chimie()
            + fonctionnalite_specifique_chimie()
        }

        class Ingenierie 
        {
            + <<créer>> Ingenierie()
            + fonctionnalite_specifique_ingenierie()
        }
    }

    class Etudiant 
    {
        + supprimer_etudiant(i : Integer)
        + ajouter_etudiant(dept : String)
        + obtenir_id() : Integer
        + obtenir_annee() : Integer
        + obtenir_dept() : String
        + obtenir_humeur() : Real
        + obtenir_niveau() : Real
        + definir_annee(annee : Integer)
        + definir_humeur(coeff : Real)
        + definir_niveau(coeff : Real)
        + supprimer_etudiant_par_dept(dept : String, nb : Integer)
        + humeur_moyenne_par_dept(dept : String) : Real
        + taux_reussite_par_dept(dept : String) : Real
        + humeur_moyenne() : Real
        + calculer_nb() : Integer
        + taux_reussite() : Real
    }

    class Professeur 
    {
        + supprimer_professeur(i : Integer)
        + ajouter_professeur(dept : String)
        + obtenir_id(id: Integer) : Integer  # Modifié
        + obtenir_dept(id: Integer) : String  # Modifié
        + obtenir_humeur(id: Integer) : Real  # Modifié
        + definir_humeur(coeff : Real)
        + supprimer_professeur_par_dept(dept : String, nb : Integer)
        + calculer_nb_par_dept(dept : String) : Integer
        + humeur_moyenne_par_dept(dept : String) : Real
        + calculer_nb() : Integer
        + humeur_moyenne() : Real
    }

    class Fond 
    {
        + <<Créer>> Fond(source : String, montant : Real, destination : String?)
        + ajouter_fond(source : String, montant : Real, destination : String?)
        + obtenir_id(id: Integer) : Integer  # Modifié
        + obtenir_source(id: Integer) : String  # Modifié
        + obtenir_montant(id: Integer) : Real  # Modifié
        + obtenir_destination(id: Integer) : String  # Modifié
        + definir_destination(dest : String)
    }

    class TableEtudiantsSQL 
    {
        + id : Integer <<PK>>
        + annee : Integer [1..3]
        + dept : String
        + humeur : Real [0, 1]
        + niveau : Real [0, 1]
    }

    class TableProfesseursSQL 
    {
        + id : Integer <<PK>>
        + dept : String
        + humeur : Real [0, 1]
    }

    class TableFondsSQL 
    {
        + id : Integer <<PK>>
        + montant : Real
        + source : String
        + destination : String
    }

    class TableNotificationsSQL 
    {
        + id : Integer <<PK>>
        + message : String
    }
}

class Difficulte 
{
    + niveau : String
    + definir_niveau(niv : String)
    + ajuster_budget(facteur : Real)
    + ajuster_satisfaction(facteur : Real)
    + ajuster_probabilite_evenement(facteur : Real)
}




RenovIUTApp ...> vues
VueBatiment ...> Batiment
Menu ...> gestion
FinDeJeu ..> Election
Etude ..> Etudiant
Enseignement ..> Professeur
Financement ..> Fond 
Evenement *---> Batiment
Etudiant ..> TableEtudiantsSQL
Professeur ..> TableProfesseursSQL
Fond ..> TableFondsSQL
ChoixEvenement o--> Evenement

Batiment --|> Informatique
Batiment --|> Communication
Batiment --|> Marketing
Batiment --|> Chimie
Batiment --|> Ingenierie
Evenement -|> Urgente 
Evenement -|> Planifiee

GestionTemps ..> Difficulte
Financement ..> Difficulte
Menu ..> Difficulte

@enduml
