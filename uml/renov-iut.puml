@startuml
'https://plantuml.com/class-diagram
package application {
     class RenovIUTApp {
    + static app: RenovIUTApp
    - scene: Resource
    '- illkirch: IUTFacade
    - panelChoixScenario: Node2D
    - loaded: Boolean

    + _ready()
    + startGame()
    + game_loaded()
    + _on_next_pressed()
    + close_app()
    + open_notif()
    + open_bankrupt()
    + open_building(id: Integer)
    + building_work(id: Integer, visible: Boolean)
    + notifyDateChanged()
    + notifyStateChanged()
     }

}
package Controllers{
    package campus{


       class Budget {
           - pay_teacher : Integer [*]
           - nb_pay_teacher : Integer
           - pay_worker : Integer[*]
           - nb_pay_worker : Integer
           - pay_heating : Integer[*]
           - previous_bill : Integer

           + reset_bill()
           + add_daily_expense()
           + pay_bill()
           + send_bill_detail()
           + sum_pay(table : Integer[*] ) : Integer
           + get_previous_bill() : Integer
           + send_fund()
           + static init_budget()
           + static init_budget_building(build : Building)
       }

       class BuildingManagement {
           + {static} init_building()
           + {static} rise_end_exam_difficulty(dept : String)
           +{static}decrease_end_exam_difficulty(dept : String)
           + {static} rise_entry_exam_difficulty(dept : String)
           + {static} decrease_entry_exam_difficulty(dept : String)
           + {static} advance_work(building : Building)
           + {static}start_renovation(building : Building) : Boolean
           + {static} fireWorker(dept : String)
           + {static} hireWorker(dept : String)
           + {static}switchHeat(dept : String)
           + {static}fireAgent(dept : String)
           + {static} hireAgent(dept : String)
           +{static}lockDoor(dept : String)
           + {static} wear()
           + {static} compute_attractivity()
           + {static} adjust_attractivity()
       }

       class Expense {
           + {static} expense_global(amount : Integer)
           + {static} expense_dept(amount : Integer, dept : String)
           + {static} try_expense_global(amount : Integer) : Boolean
           + {static} try_expense_dept(amount : Integer, dept : String) : Boolean
           + {static} bankrupt()
       }

       class Study {
           - students_base_nb : Integer[*]
           - fluct : Real
           - exam_base_result : Real

           + {static} populate_promo(dept : Integer, year : Integer) : Integer
           + {static} populate()
           + {static} populate_new_year(scenario : Scenario)
           + {static} pass_dept_exam(dept : String) : [*]
           + {static} pass_next_year()
           + {static} teacher_adjust_level()
           + {static} teacher_adjust_mood()
           + {static} door_adjust_mood()
           + {static} mood_fluctuation(dept : String, value : Real, coeff : Real)
           + {static} level_fluctuation(dept : String, value :Real, coeff : Real)
           + {static} student_resign()
       }

       class Teaching {
           - teachers_base_nb : Integer[*]
           - minimum_wage : Integer
           - maximum_wage : Integer

           + static hire_teachers(dept : String, force : Boolean)
           + static fire_teachers(dept : String)
           + static populate()
           + static mood_fluctuation(dept : String, value : Real, coeff : Real)
           + static increase_salary(dept : String)
           + static decrease_salary(dept : String)
           + static teacher_resign()
           + static pay_adjust_mood()
       }
    }

    package Timeline
    {
       Abstract class Scenario {
           - _name : String

           + init()
           + get_scenario() : String
           + {static} get_description() : String
           + game_start()
           + test_end_game_condition() : Boolean
           + end_game()
           + mid_game()
           + player_report() : String
           + side_effect() : String
       }
       class ScenarioElection extends Scenario {
           - _progression : Integer

           + init()
           + game_start()
           + {static} get_description() : String
           + test_end_game_condition() : Boolean
           + end_game()
           + mid_game()
           + player_report() : String
       }
       class ScenarioElitisme extends Scenario {
           - _progression : Integer

           + init()
           + game_start()
           + {static} get_description() : String
           + test_end_game_condition() : Boolean
           + end_game()
           + mid_game()
           + player_report() : String
       }


       class ScenarioRenovation extends Scenario {
           '- old_builds : Building[*]
           - _progression : Boolean[*]

           + init()
           + game_start()
           + static get_description() : String
           + test_end_game_condition() : Boolean
           + end_game()
           + mid_game()
           + building_to_renov_wear()
           + player_report() : String
       }
       class TimeManagement {
          ' - _tuto : Tutorial
          ' - _scenario : Scenario
          ' - _budget : Budget

           + _init(scenario : Scenario, tuto : Tutorial)
           + start()
           + next_Trimestre()
           + Event() : Boolean
           + mood_and_level_update()
           + {static} heat_adjust_mood()
           + {static}  inventory_adjust_mood()
           + {static}  renovation_adjust_mood()
       }

       class Tutorial {
           - _tutorial : Boolean
           '- _tuto_buble : BulleTutorial
           - _trimester : Integer

           + _init(tuto : Boolean)
           + _ready()
           + _process(delta : Real)
           + tuto_next()
           + tuto_trimester1()
           + tuto_trimester2()
           + tuto_trimester3()
           + tuto_trimester4()
           + tuto_trimester5()
       }


       class Vote {
           +{static} election_gagnee() : Boolean

           +{static} nb_voix_teacher_per_dept(dept: String) : Integer
           {+static} nb_voix_student_per_dept(dept: String) : Integer
           +{static} nb_voix_per_dept(dept: String) : Integer
           +{static} nb_voix_teacher() : Integer
           +{static} nb_voix_student() : Integer
           +{static} nb_voix_total() : Integer

           +{static} popularity_total() : Real
           +{static} popularity_among_students() : Integer
           +{static} popularity_among_teachers() : Integer
           +{static} popularity_per_dept(dept: String) : Integer

           +{static} popularity_among_teachers_per_dept(dept: String) : Integer
           +{static} popularity_among_students_per_dept(dept: String) : Integer

           +{static} logistic_function(x: Real, k: Real ) : Real
       }

    }
    class BulleGestion {
        +{static} liste_notif_count : [*]

        +{static} send_message(message : String, notif : Boolean)
        +{static} send_notif(objet : String, message : String, type : Integer)
    }
    class IUTFacade {
        - _tuto : Tutorial
        - _scenario : Scenario
        - _time : TimeManagement
        - _id : Integer

        chooseMode(scenario : Integer, difficulty:Integer)
        startGame()
    }


}
package global{
   class DBManager {
       - db: SQLite
       - db_path: String

       + _init(path: String)
       + open_db() : Boolean
       + close_db()
       + execute(query: String, params: [*]) : Boolean
       + get_entries(query: String, params: []) : []
       + print_entries(query: String, params: [*])
       + clear_tables()
   }
   class Global {
       '- db : DBManager
       - ok : Boolean
       - normal_inflation_rate :Real
       - indexation_rate : Real

       + create_iut_db()
       +{static} dept_index_to_string(index : Integer) : String
       +{static} dept_string_to_index(source : String) : Integer
       +{static} get_month_name(month : Integer) : String
       + randint_in_range(min : Integer, max : Integer) : Integer
       + randfloat_in_range(min :Real, max : Real) : Real
       + randfloat_in_square_range(min :Real, max : Real) : Real
   }



}
package Ã¹odels{
   class GlobalData {
       -{static} _year : Integer
       -{static} _month : Integer
       -{static} _day : Integer
       -{static} _budget : Integer
	   -{static} _difficulty : Integer
       -{static} _attractivity : Float
       -{static} _pay_worker : Integer
       +{static} setBudget(montant : Integer)
       +{static} addBudget(montant : Integer)
       +{static} getBudget() : Integer
       +{static} getTotalBudget() : Integer
       +{static} get_pay_worker() : Integer
       +{static} setDate(day : Integer, month : Integer, year : Integer)
       +{static} get_attractivity() : Real
	   +{static} set_attractivity(value : Real)
       +{static} incrementDay()
       +{static} incrementTrimestre()
	   +{static} isNewMonth() : Boolean
       +{static} isEndofYear() : Boolean
       +{static} isStartofYear() : Boolean
       +{static} get_season() : Integer
       +{static} get_year_to_str() : String
       +{static} get_season_text() : String
       +{static} get_date() : String
       +{static} get_difficulty() : Integer
       +{static} set_difficulty(value : Integer)
	   +{static} adjust_budget_initial() : Integer
       +{static} adjust_fund() : Real
       +{static} adjust_satisfaction() : Real
       +{static} adjust_level() : Real
       +{static} adjust_dept_state() : Real
       +{static} adjust_event_proba() : Real
       +{static} formatBudget(number : Integer) : String
   }
   
   class Notification {
     + {static} get_all_ids():[*]
     + {static} get_message(id: Integer): String
     + {static} get_object(id: Integer): String
     + {static} get_date(id: Integer): String
     + {static} get_type(id: Integer): Integer
     + {static} add_notification(message: String, object: String, date: String, type: Integer)
   }

   package humain{
       class Student {
         - {static} _graduate: Integer
         - {static} _engineering: Integer
         +{static} student_id_counter: Integer
         +{static} get_graduate(): Integer
         +{static} add_graduate()
        + {static} get_engineering(): Integer
         +{static} add_engineering()
         +{static} get_all_ids(): [*]
         +{static} get_dept_ids(dept: String):[*]
         +{static} add_student(dept: String, year: Integer): Integer
        + {static} rm_student_by_id(id: Integer)
        + {static} rm_students_by_dept(dept: String, nb: Integer)
         +{static} rm_student_by_mood(mood: Real)
         +{static} get_year(id: Integer): Integer
         +{static} get_dept(id: Integer): String
        + {static} get_mood(id: Integer): Real
        + {static} get_level(id: Integer): Real
         +{static} get_base_level(id: Integer): Real
        + {static} set_year(id: Integer, new_year: Integer)
         +{static} set_mood(id: Integer, coeff: Real)
         +{static} set_level(id: Integer, coeff: Real)
        + {static} set_base_level(id: Integer, coeff: Real)
         +{static} compute_nb_per_dept(dept: String): Real
        + {static} avg_mood_per_dept(dept: String): Real
        + {static} avg_level_per_dept(dept: String): Real
        + {static} compute_nb(): Real
         +{static} avg_mood(): Real
         +{static} avg_level(): Real
         +{static} success_rate_per_dept(dept: String):Real
         +{static} success_rate(): Real
       }

       class Teacher {
         +{static} teacher_id_counter: Integer
         +{static} get_all_ids():[*]
         +{static} get_dept_ids(dept: String): [*]
         +{static} add_teacher(dept: String): Integer
         +{static} rm_teacher_by_id(id: Integer)
         +{static} rm_teachers_by_dept(dept: String, nb: Integer)
         +{static} rm_teacher_by_mood(mood: Real)
         +{static} get_dept(id: Integer): String
         +{static} get_mood(id: Integer): Real
         +{static} set_mood(id: Integer, coeff: Real)
         +{static} compute_nb_per_dept(dept: String): Integer
         +{static} avg_mood_per_dept(dept: String): Real
         +{static} compute_nb(): Real
         +{static} avg_mood(): Real
       }
   }
   
   package data {
		class Students
        {
            + id : Integer <<PK>>
            + year : Integer [1..3]
            + dept : String
            + mood : Real [0, 1]
            + level : Real [0, 1]
            + base_level : Real
        }
        
        class Teachers
        {
            + id : Integer <<PK>>
            + dept : String
            + mood : Real [0, 1]
            + full-time : Boolean
        }
        
		class Notifications
        {
            + id : Integer <<PK>>
            + message : String
            + objet : String
            + date : Date
            + type : Integer
        }
        
		class Depts
        {
            + id : Integer <<PK>>
            + name : String
        }
   }
   
   package material{
       class Building {
         + {static} fixed_cost_renovation: Integer
         + {static} coeffTempsRenovation: Integer
         + {static} MonthlySquareMetersHeatingCost: Integer
         + {static} _buildingsDictionary: Dictionary
         + {static} _total_buildings_under_renovation: Integer

         -_age: Integer
         -_doorLocked: Boolean
         -_surface: Integer
         -_heating: Boolean
         -_code: String
         -_inventory: Real
         -_ouvriers: Integer
         -_is_renovation_underway: Boolean
         -_budget: Integer
         -_pay_teacher: Integer
         -_entry_exam: Real
         -_end_exam: Real

         +{static} get_building(code: String): Building
         +get_code(): String
         +get_pay_teacher(): Integer
         +get_budget(): Integer
         +get_age(): Integer
         +get_inventory(): Real
         +get_surface(): Integer
         +is_heating(): Boolean
         +get_ouvriers(): Integer
         +is_renovation_underway(): Boolean
         +{static} get_total_buildings_under_renovation(): Integer
         +isDoorLocked(): Boolean
         +get_exam_entry(): Real
         +get_exam_end(): Real
         +set_pay_teacher(amount: Integer)
         +setHeat(heat: Boolean)
         +setInventory(value: Real)
         +set_renovation_underway(underway: Boolean)
         +set_budget(value: Integer)
         +setDoorLocked(locked: Boolean)
         +set_exam_entry(value:Real)
         +set_exam_end(value: Real)
         +add_pay_teacher(amount: Integer)
         +add_ouvrier()
         +remove_ouvrier()
         +addInventory(value: Integer)
         +add_budget(amount: Integer)
         +start_renovation_work()
         +stop_renovation_work()
         +estimated_renovation_worktime(): Integer
       }

   }


}
package observer{
   class ObserverBuilding {
       - {static} Observer : []
       +{static} addObserver(O)
       + {static} notifyStateChanged()
   }
   class ObserverGlobalData {
       +{static} Observer: []
       +{static} addObserver(O)
       +{static} notifyBudgetChanged()
       +{static} notifyDateChanged()
       +{static} notifyAttractivityChanged()
   }
   class ObserverPopulation {
       +{static} Observer: []
       +{static} addObserver(O)
       +{static} notifyLevelChanged()
       +{static} notifySatisfactionChanged()
   }
}

package views{
  package node3D {
  	    package Character
  	    {
  	       class Bonhomme {
                 + distance: Real
                 + animation_player: AnimationPlayer
                 - visible_summer: Boolean

                 + _ready()
                 + content()
                 + facher()
                 + setVisible()
             }
             class Bonhommes {
                 - notif: [*]
                 - page: Integer
                 - page_size: Integer
                 - buttons: Button[*]

                 + _ready()
                 + _process(delta: Real)
                 + open_page()
                 + create_question_button(text: String, id: Integer, n: Integer)
                 + _on_next_pressed()
                 + _on_last_pressed()
                 + notif_pressed(id: Integer)
                 + _on_close_pressed()
             }

  	    }
  	    package Tree{
  	       class Tree{
             		+ {static} trunc_path : String
             		+ {static} material_path : String
             		+ {static} texture_path : String
             		+ {static} mask_path : String
              	+ _ready()
                  + _process(delta: Real)
                  + apply_material_to_mesh_instances(node: Node3D, material: Material, trunc: Material)
                  + notifyDateChanged()
                  + summer()
                  + winter()
                  + printer()
                  + autumn()
             }
  	    }
  	    class CameraRoot {
              - _default_scale:  Vector3
              - _rot_Y:Real

              + _ready()
              + _process(delta:Real)
              + curve_scale(degrees: Real): Real
              + rotate_root(coeff: Real)
              + _input(event: InputEvent)
              + rotate_tutorial(time: Real)
          }
          class Camera3D {
              - _default_scale: Vector3[*]
              - _building:MeshInstance3D[*]
              - big: Boolean

              + _ready()
              + _input(event: InputEvent)
              + handle_3d_click(event: InputEventMouseButton)
              + handle_hover(event: InputEventMouseMotion)
              + big_build(build: Integer)
          }
  }

  package node2D {

  		package BuildingAction {
  		    class BuildingAction {
                  - code: String
                  - build: Building
                  - click: AudioStreamPlayer2D
                  - under_construction: AudioStreamPlayer2D
                  - is_message_active: Boolean

                  + _ready()
                  + _process(delta: Real)
                  + init(id: integer)
                  + show_data()
                  + check_and_update_buttons()
                  + _on_hire_teacher_pressed()
                  + _on_fire_teacher_pressed()
                  + _on_renove_pressed()
                  + _on_lock_pressed()
                  + _on_fire_worker_pressed()
                  + _on_hire_worker_pressed()
                  + _on_heat_pressed()
                  + _on_close_pressed()
                  + _on_increase_pay_pressed()
                  + _on_add_exem_end_pressed()
                  + _on_sub_exam_end_pressed()
                  + _on_add_exem_entry_pressed()
                  + _on_sub_exam_entry_pressed()
                  + _on_decrease_pay_pressed()
                  + _on_sub_teacher_mouse_entered()
                  + _on_sub_worker_mouse_entered()
                  + _on_add_teacher_mouse_entered()
                  + _on_add_worker_mouse_entered()
                  + _on_heat_mouse_entered()
              }
  		}

  		package bulle {
  			class BulleMessageScript {
  				- _message : String
  				- _ready()
  				- _process(delta : Real)
  				+ init(message : String)
  				- _input(event : InputEvent)
  				+ enter()
  			}

  			class BulleNotifScript {
  				- _message : String
  				- _object : String
  				+ tick : Integer
  		        + _ready()
                  + _process(delta: Real)
                  + delete()
                  + init(objet: String, message: String, type: integer)
                  + _input(event : InputEvent)
                  + enter()
  			}

  			class BulleQuestionScript {
  				- _question: String
                  - _fonctionReponse: String
                  - _reponse: String[*]
                  - _node: Node
                  - tick: Integer

                  + _ready()
                  + _process(delta: Real)
                  + init(question: String, reponse: String[*], fonction: String, node: Node)
                  + create_question_button(id: Integer)
                  + _on_answer_pressed(id: Integer)
                  + delete()
  			}
  			class BulleTutorial {
                  - buble: Panel
                  - style: StyleBoxFlat
                  - _message: String
                  - _objet: String
                  - tick: Integer

                  + _ready()
                  + _process(delta: Real)
                  + hide_buble()
                  + show_buble(sx: Integer, sy: Integer, px: Integer, py: Integer)
                  + set_border_width(width: Integer)
                  + special_effect()
              }

  		}

  		package choixScenario {

  			class ChoixScenarioScript {
                  '- _IUT: IUTFacade
                  '- _app: RenovIUTApp
                  - scenario: Integer
                  - difficulty: Integer

                  + _ready()
                  + _process(delta: Real)
                  + init(iut: IUTFacade, app: RenovIUTApp)
                  + _on_button_election_pressed()
                  + _on_button_renovation_pressed()
                  + _on_suivant_pressed()
                  + _on_button_elitism_pressed()
                  + _on_switch_tuto_option_toggled(toggled_on: Boolean)
              }


  		}
  		package finJeu {
				interface FinJeu {
					# _process(delta : Real)
					+ show_result()
				}
  		
  		
          		class BankruptScript implements FinJeu {
          			 + _ready()
                     + _process(delta: Real)
          		}

          		class FinElectionScript implements FinJeu {
          			- _ready()
          			- _process(delta : Real)
          			+ show_result()
          		}

          		class FinRenovationScript implements FinJeu {
          			- _ready()
          			- _process(delta : Real)
          			+ show_result()
          		}
          		class FinEletismeScript implements FinJeu {
                       + _ready()
                       + _process(delta: Real)
                       + show_result()
                       + _on_QuitterButton_pressed(toggled_on: Boolean)
                  }
          }
          
          package notif_list {
          		class NotifListScript {
          			- notif: [*]
                      - page: integer
                      - page_size: Integer
                      - buttons: Button[*]

                      + _ready()
                      + _process(delta: Real)
                      + open_page()
                      + create_question_button(text: String, id: Integer, n: Integer)
                      + _on_next_pressed()
                      + _on_last_pressed()
                      + notif_pressed(id: Integer)
                      + _on_close_pressed()
          		}i
          }
          package stat {
          		class StatScript {
          			- _ready()
          			- _process()
          			+ notifyBudgetChanged()
          			+ notifyLevelChanged()
          			+ notifySatisfactionChanged()
          			+ updateDate()
          		}
          }



      }





}


'ModÃ¨le utilise data'
Student ..> Students
Teacher ..> Teachers
Building ..> Depts
Notification ..>Notifications
Teacher "1" o--> "1\n - dept" Depts
Student "1" o--> "1\n - dept" Depts

'Controller manipule le modÃ¨le'
Study ....> Student : modifie
Teaching ....> Teacher : modifie

BuildingManagement ..> Building
TimeManagement ..> GlobalData

        RenovIUTApp -> ObserverBuilding : observe
        RenovIUTApp -> ObserverGlobalData : observe
        RenovIUTApp -> ObserverPopulation : observe
        RenovIUTApp ..> ChoixScenarioScript : initialise scÃ©nario
        RenovIUTApp ..> NotifListScript : affiche notifications
        RenovIUTApp ..> BankruptScript : montre faillite
        RenovIUTApp ..> FinElectionScript : affiche fin d'Ã©lection
        RenovIUTApp ..> FinRenovationScript : affiche fin de rÃ©novation
        RenovIUTApp ..> FinEletismeScript : affiche fin d'Ã©litisme

        RenovIUTApp ..> Vote : utilise
        RenovIUTApp ..> GlobalData : utilise
        RenovIUTApp ..> Notification : utilise
        RenovIUTApp ..> Tutorial : utilise
 RenovIUTApp  *-> "1\n - illkirch" IUTFacade





'Vue utilise controller'
FinElectionScript ..> Vote
BulleMessageScript..>BulleGestion
BulleNotifScript..>BulleGestion
BulleTutorial ..>BulleGestion

ChoixScenarioScript .> Scenario


 ChoixScenarioScript  *-> "1\n - build" BuildingAction
 BuildingManagement ..> BuildingAction

 ChoixScenarioScript  o---> "1\n - _app" RenovIUTApp

 ChoixScenarioScript  o---> "1\n - _IUT" IUTFacade
Building ..> GlobalData
 Global o--> "1\n - _db" DBManager
    IUTFacade o--> "1\n - _tuto" Tutorial
    IUTFacade o--> "1\n - _scenario" Scenario
    IUTFacade--> "1\n - _time" TimeManagement
    IUTFacade ...> GlobalData


Vote ..> Teacher
           Vote ..> Student
           Vote ..> GlobalData

BulleGestion ...> Notification
BulleGestion ..> GlobalData
BulleGestion ..> RenovIUTApp

    Object<|--Vote
           Tutorial"1" o--> "1\n - _tuto_buble" BulleTutorial

    ScenarioRenovation "1" o-> "1\n - old_Builds" Building
    TimeManagement "1" o--> "1\n - _tuto" Tutorial
    TimeManagement "1" o--> "1\n - _scenario" Scenario
    TimeManagement"1" o--> "1\n - _budget" Budget

       Budget ..> Building : utilise

@enduml
