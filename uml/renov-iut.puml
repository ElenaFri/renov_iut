@startuml RenovIUTApp

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods

package application {
	class RenovIUTApp
	{
		- _ready()
		+ choiceDifficulty()
		+ startGame()
		+ close_app()
		+ open_notif()
		+ open_bankrupt()
		+ open_building(id : Integer)
		- _on_info_pressed()
		- _on_chimie_pressed()
		- _on_info_com_pressed()
		- _on_tech_co_pressed()
		- _on_genie_civil_pressed()
	}
}

package global {
    class DBManager
    {
    	+ db : SQLite
    	+ db_path : String
    	- _init DBManager(path : String)
    	+ open_db() : Boolean
    	+ close_db()
    	+ execute(query : String, params : String[*]) : Boolean
    	+ get_entries(query : String, params : String[*]) : [*]
    	+ clear_tables()
    }

    class Glob
    {
		+ {static} db : DBManager
    	+ {static} ok : Boolean
    	+ {static} normal_inflation_rate : Real
    	+ {static} indexation_rate : Real
    	+ {static} csv_path : String
    	+ create_iut_db()
    	+ fill_notifications_from_csv(file_path : String)
    	+ dept_string_to_index(dept : String) : Integer
    	+ dept_index_to_string(index : Integer) : String
    	+ source_string_to_index(dept : String) : Integer
    	+ source_index_to_string(index : Integer) : String
    	+ {static} get_month_name(month : Integer) : String
		+ randint_in_range(min : Integer, max : Integer) : Integer
		+ randfloat_in_range(min : Real, max : Real) : Real
		+ randfloat_in_square_range(min : Real, max : Real) : Real
    }
}

package observer {
		class ObserverBuilding {
			+ {static} observer : [*]
			+ {static} addObserver(0)
			+ {static} notifyStateChanged()
		}

		class ObserverGlobalData {
			+ {static} observer : [*]
			+ {static} addObserver(0)
			+ {static} notifyBudgetChanged()
		}

		class ObserverPopulation {
			+ {static} observer : [*]
			+ {static} addObserver(0)
			+ {static} notifyLevelChanged()
			+ {static} notifySatisfactionChanged()
		}
}

package views {
	package node2D {
		class BuildingAction {
			+ code : String
			+ build : Building
			- _ready()
			- _process(delta : Real)
			+ init(id : Integer)
			+ show_data()
			- _on_hire_teacher_pressed()
			- _on_fire_teacher_pressed()
			- _on_insule_pressed()
			- _on_renove_pressed()
			- _on_lock_pressed()
			- _on_fire_worker_pressed()
			- _on_fire_agent_pressed()
			- _on_hire_worker_pressed()
			- _on_hire_agent_pressed()
			- _on_heat_pressed()
			- _on_close_pressed()
			- _on_increase_pay_pressed()
			- _on_add_exem_end_pressed()
			- _on_sub_exam_end_pressed()
			- _on_add_exem_entry_pressed()
			- _on_sub_exam_entry_pressed()
		}

		package bulle {
			class BulleMessageScript {
				- _message : String
				- _ready()
				- _process(delta : Real)
				+ init(message : String)
				- _input(event : InputEvent)
				+ enter()
			}

			class BulleNotifScript {
				- _message : String
				- _object : String
				+ tick : Integer
				- _ready()
				- _process(delta : Real)
				+ init(objet : String, message : String, type : Integer)
			}

			class BulleQuestionScript {
				- _question : String
				- _fonctionResponse : String
				- _reponse : String [*]
				- _node : Node
				- _ready()
				- _process(delta : Real)
				+ init(question : String, reponse : String[*] ,fonction : String, node : Node)
				+ create_question_button(id : Integer)
				- _on_answer_pressed(id : Integer)
			}
		}

		package choix {
			class ChoixDifficultyScript {
				- _IUT : IUTFacade
				- _app : RenovIUTApp
				+ difficulty : Integer
				+ init(iut : IUTFacade, app : RenovIUTApp)
				- _ready()
				- _process(delta : Real)
				- _on_easy_pressed()
				- _on_medium_pressed()
				- _on_hard_pressed()
				- _on_suivant_pressed()
			}

			class ChoixScenarioScript {
				- _IUT : IUTFacade
				- _app : RenovIUTApp
				+ scenario : Integer
				+ init(iut : IUTFacade, app : RenovIUTApp)
				- _ready()
				- _process(delta : Real)
				- _on_button_election_pressed()
				- _on_button_renovation_pressed()
				- _on_suivant_pressed()
			}
		}
    }

	package node3D {
		class Tree {
			+ {static} trunc_path : String
			+ {static} material_path : String
			+ {static} texture_path : String
			+ {static} mask_path : String
			+ _ready()
			+ apply_material_to_mesh_instances(node: Node3D, material: Material, trunc: Material)
		}
	}

	package fin_jeu {
		class BankruptScript {
			- _ready()
			- _process(delta : Real)
		}

		class FinElectionScript {
			- _ready()
			- _process(delta : Real)
			+ show_result()
		}

		class FinRenovationScript {
			- _ready()
			- _process(delta : Real)
			+ show_result()
		}
	}

	package notif_list {
		class NotifListScript {
			+ notif : [*]
			+ page : Integer
			+ {static} page_size : Integer
			+ buttons : Button[*]
			- _ready()
			+ open_page()
			+ create_question_button(text : String, id : Integer, n : Integer)
			- _on_next_pressed()
			- _on_last_pressed()
			+ notif_pressed(id : Integer)
			- _on_close_pressed()
		}
	}

	package stat {
		class StatScript {
			- _ready()
			- _process()
			+ notifyBudgetChanged()
			+ notifyLevelChanged()
			+ notifySatisfactionChanged()
			+ updateDate()
		}
	}

	class Menu {
		+ _on_QuitterButton_pressed()
		+ _on_FermerMenuButton_pressed()
		+ _on_OuvrirPanelButton_pressed()
	}
}

package controllers
{
		package timeline
        {
			class TimeManagement
			{
				+ _init(scenario: Scenario)
				+ tick()
                + wait(time : Real)
                + end_of_month()
				+ end_of_year()
                + year_begin()
				+ pause(p : Boolean)
			}

            abstract class Scenario
		    {
                - name : String
                + {abstract} _init()
            	+ {abstract} test_end_game_condition() : Boolean
                + {abstract} end_game()
				+ {abstract} random_event()
                + {abstract} init_data()
                + init_building()
				+ get_name() : String
                + {abstract} {static} get_description() : String

				+ adjust_budget(coeff : Real)
				+ adjust_student_satisfaction(coeff : Real)
				+ adjust_teacher_satisfaction(coeff : Real)
				+ adjust_call_probability(call : Integer, coeff : Real)
				+ adjust_dept_state(dept: String, coeff : Real)
		    }

            class ScenarioElection
            {
             + {static} get_description() : String
            }

            class ScenarioRenovation
            {
             + {static} get_description() : String
            }

			class Vote
			{
                + {static} nb_voix_per_dept(dept: String) : int
                + {static} nb_voix_teacher_per_dept(dept: String) : int
                + {static} nb_voix_student_per_dept(dept: String) : int
                + {static} nb_voix_teacher() : int
                + {static} nb_voix_student() : int
                + {static} nb_voix_total() : int
				+ {static} election_gagnee() : Boolean
				+ {static} popularity_rate() : Real
				+ {static} popularity_rate_per_dept(dept : String) : Real
				+ {static} popularity_rate_among_teachers() : Real
				+ {static} popularity_rate_among_teachers_per_dept(dept : String) : Real
				+ {static} popularity_rate_among_students() : Real
				+ {static} popularity_rate_among_students_per_dept(dept : String) : Real
			}
    }

    package school
    {
        class Teaching
        {
            + {static} hire_teachers(dept : String)
            + {static} fire_teachers(dept : String)
            + {static} populate()
            + {static} boost_satisfaction_teacher(dept : String, value : Real)
            + {static} drop_satisfaction_teacher(dept : String, value : Real)
        }

        class Study
        {
            + {static} populate()
            + {static} populate_promo(dept : String, year : Integer)
            + {static} evaluate()
            + {static} next_year()
            + {static} boost_satisfaction_student(dept : String, value : Real)
            + {static} drop_satisfaction_student(dept : String, value : Real)
            + {static} boost_level_student(dept : String, value : Real)
            + {static} drop_level_student(dept : String, value : Real)
        }
    }

    package management
    {
        class BuildingManagement
        {
            + {static} switchHeat(dept : String)
            + {static} fireAgent(dept : String)
            + {static} hireAgent(dept : String)
            + {static} lockDoor(dept : String)
            + {static} unlockDoor(dept : String)
        }


        class Financing
        {
            + finance(dept : String)
            + finance(dept : String, destination : String)
            + finance(destination : String)
            + update_budget()
        }

        abstract class Action
        {
            + planify_action()
        }

        class Planified
        {
            + planify_for_next_year()
        }

        class Urgent
        {
            + respond_to_urgent()
        }
    }

    abstract class Event
    {
        - _question : bool
        - _name : String
        - _description : String
        - _question_script : String
        - _question_answer : Array[String]
        + {static} create_event(id : Event) : Event
        + _init()
        + start_event() : void
        + {abstract} react_to_answer(answer : String) : void
        + get_question() : bool
        + get_name() : String
        + get_description() : String
        + get_question_script() : String
        + get_question_answer() : Array[String]
    }

    class _question
    {
        + ask_question_event(_event : Event)
    }


}





package models
{
    class globalData
    {
        - {static} _year : Integer
		- {static} _month : Integer
		- {static} _day : Integer
        - {static} _budget : Integer
        - {static} difficulty : Integer
        + {static} setBudget(montant : Integer)
        + {static} addBudget(montant : Integer)
        + {static} getBudget() : Integer
        + {static} setDate(day,month,year)
        + {static} incrementDay()
        + {static} isNewMonth() : Boolean
        + {static} isEndofYear() : Boolean
        + {static} isStartofYear() : Boolean
        + {static} get_season() : Integer

        + {static} get_difficulty() : Integer
        + {static} set_difficulty() : Integer
        + {static} adjust_budget_initial() : Integer
        + {static} adjust_fund() : Real
		+ {static} adjust_satisfaction() : Real
		+ {static} adjust_level() : Real
		+ {static} adjust_dept_state() : Real
        + {static} adjust_event_proba() : Real

    }

	package human {
		class Students
		{
                + {static} get_all_ids() : Array
                + {static} get_dept_ids() : Array
				+ {static} add_student(dept : String, year: Integer)
				+ {static} rm_student(id : Integer)
				+ {static} rm_students_by_dept(dept : String, nb : Integer)
				+ {static} get_year(id : Integer) : Integer
				+ {static} get_dept(id : Integer) : String
				+ {static} get_mood(id : Integer) : Real
				+ {static} get_level(id : Integer) : Real
				+ {static} set_year(id : Integer, year : Integer)
				+ {static} set_mood(id : Integer, coeff : Real)
				+ {static} set_level(id : Integer, coeff : Real)
				+ {static} compute_nb_per_dept(dept : String) : Real
				+ {static} avg_mood_per_dept(dept : String) : Real
				+ {static} compute_nb() : Real
				+ {static} avg_mood() : Real
				+ {static} success_rate_per_dept(dept : String) : Real
				+ {static} success_rate() : Real
		}
		class Teachers
		{
                + {static} get_all_ids() : Array
                + {static} get_dept_ids() : Array
				+ {static} add_teacher(dept : String, full_time : Boolean)
				+ {static} rm_teacher(id : Integer)
				+ {static} rm_teachers_by_dept(dept : String, nb : Integer)
				+ {static} get_dept(id : Integer) : String
				+ {static} get_mood(id : Integer) : Real
				+ {static} get_if_fulltime(id : Integer) : Boolean
				+ {static} set_mood(id : Integer, coeff : Real)
				+ {static} set_fulltime(id : Integer, status : Boolean)
				+ {static} compute_nb_per_dept(dept : String) : Real
				+ {static} avg_mood_per_dept(dept : String) : Real
				+ {static} compute_nb() : Real
				+ {static} avg_mood() : Real
		}
        class StudentSQLTable
        {
            + id : Integer <<PK>>
            + year : Integer [1..3]
            + dept : String
            + mood : Real [0, 1]
            + level : Real [0, 1]
        }
        class TeacherSQLTable
        {
            + id : Integer <<PK>>
            + dept : String
            + mood : Real [0, 1]
            + full-time : Boolean
        }

    }

		package material
        {
			class Building
			{
				- _age : Integer
                - _doorLocked : Boolean
				- _surface : Integer
				- _heating : Boolean
				- _maintenance_agents_nb : Integer
                - _code : String
                - _isolation : Integer[0..100]
                - _inventory : integer[0..100]
                + _init(age, isolation, surface, heating, maintenance_agents_nb, code, inventory)
                + {static} get_building(code : String) : Building
			    + get_code() : String
                + get_age() : int
                + get_isolation() : int
                + get_surface() : int
                + is_heating() : bool
                + get_agents_nb() : int
                + add_agent()
                + rm_agent()
                + setHeat(heat : Boolean)
                + setIsolation(value : Integer)
                + setInventory(value : Integer)
                + addIsolation(value : Integer)
                + addInventory(value : Integer)
                + isDoorLocked() : Boolean
                + setDoorLocked(locked : Boolean)
			}

			class Fund
			{
				+ add_fund(source : String, amount : Real, destination : String?, time : Integer)
				+ rm_fund_by_id(i : Integer)
			    + rm_fund_by_source(source : String)
				+ get_source(id : Integer) : String
				+ get_amount(id : Integer) : Real
				+ get_area(id : Integer) : String?
				+ get time(id : Integer) : Integer
				+ set_area(id : Integer, dest : String)
				+ set_time(id : Integer, time : Integer)
				+ total() : Real
				+ total_per_dept(dept : String) : Real
				+ inflation_adjusted(indexation_rate : Real)
				+ normal_inflation_adjusted()
				+ check_availability(amount : Real, dest : String) : Boolean
				+ forecast() : Real
			}

            class Notification
            {
                + get_all_ids() : Array
                + get_message(id : Integer) : String
                + get_date(id : Integer) : String
                + get_type(id : Integer) : Integer
                + add_notification(message : String, date : String, type : Integer) : void
                + delete_notification_by_id(id : Integer) : void
            }


            class FundSQLTable
            {
                + id : Integer <<PK>>
                + amount : Real
                + source : String
                + area : String
                + time : Integer
            }

            class NotificationSQLTable
            {
                + id : Integer <<PK>>
                + message : String
                + objet : String
                + date : Date
                + type : int
            }


            class DeptSQLTable
            {
                + id : Integer <<PK>>
                + name : String
            }

            class SourceSQLTable
            {
                + id : Integer <<PK>>
                + name : String
            }

    }
}




'Appli'
RenovIUTApp ...> views
RenovIUTApp .> Glob
Glob *--> DBManager

'Vue utilise modèle'
BuildingView ...> Building
Stats ....> models

'Vue utilise controller'
GameOver ..> Vote
Reaction o--> Action
Menu ..> Scenario

'Controller utilse modèle'
Study ..> Students
Teaching ..> Teachers
Financing ..> Fund
Action *---> Building
Action *--> Call
Action *--> Event
BuildingManagement ..> Building
TimeManagement ..> global_data

'Modèle utilise SQL'
Students ..> StudentSQLTable
Teachers ..> TeacherSQLTable
Fund ....> FundSQLTable
Call ....> NotificationSQLTable
TeacherSQLTable ..> DeptSQLTable
StudentSQLTable ..> DeptSQLTable
FundSQLTable ..> DeptSQLTable
NotificationSQLTable ..> DeptSQLTable
FundSQLTable ..> SourceSQLTable
Event ..> ChoiceSQLTable
Event ..> EventSQLTable
Event ..> ConsequencesSQLTable

'Heritage'
Action -|> Urgent
Action -|> Planified
Scenario --|> ScenarioElection
Scenario --|> ScenarioRenovation

'Autre'
TimeManagement *--> Scenario
Financing ..> Scenario
Building o--> Building



@enduml

