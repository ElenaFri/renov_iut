@startuml RenovIUTApp

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods

class RenovIUTApp
{
    + {static} main(args: String[])
}

package global {
    class DBManager
    {
    	+ db : SQLite
    	+ db_path : String
    	+ <<create>> DBManager(path : String)
    	+ open_db() : Boolean
    	+ close_db()
    	+ execute(query : String, params : Array) : Boolean
    	+ get_entries(query : String, params : Array) : Array
    	+ clear_tables()
    }

    class Glob
    {
    	+ normal_inflation_rate : Real
    	+ indexation_rate : Real
    	+ db : DBManager
    	+ ok : Boolean
    	+ dept_string_to_index(dept : String) : Integer
    	+ dept_index_to_string(index : Integer) : String
    	+ source_string_to_index(dept : String) : Integer
    	+ source_index_to_string(index : Integer) : String
    }
}

package views
{
    package nodes
    {
        class BuildingView
        {
            - selected : String
            + view_options()
            + hire_teachers()
            + fire_teachers()
            + heating_on()
            + heating_off()
            + hire_maintenance_agents()
            + fire_maintenance_agents()
            + launch_action()
            + view_building_info()
        }

        class Stats
        {
            + view_budget()
            + view_satisfaction()
            + view_teacher_satisfaction()
            + view_student_satisfaction()
            + view_student_success()
        }

        class Reaction
        {
            - reactions : String[*]
            - selected : Integer
            + <<create>> Reaction()
            + define_reaction(selected : Integer)
            + send_reaction(selected : Integer)

        }
    }

    package scenes
    {
        class Start
        {
            + view_start_screen()
            + select_scenario()
            + launch_game()
        }

        class Menu
        {
            + view_menu()
            + start(scenario: Scenario)
            + quit()
        }

        class GameOver
        {
            + view_gameover()
            + replay()
        }
    }
}

package controllers
{
		package timeline {
			class TimeManagement
			{
					- year : Integer
					- month : Integer
					- day : Integer
					- scenario : Scenario
					+ <<create>> TimeManagement(scenario: Scenario)
					+ tick()
					+ random_event()
					+ get_season()
					+ end_of_year()
					+ launch_vote()
					+ pause(p : Boolean)
			}

					class Vote
			{
					+ election_gagnee() : Boolean
					+ popularity_rate() : Real
					+ popularity_rate_per_dept(dept : String) : Real
					+ popularity_rate_among_teachers() : Real
					+ popularity_rate_among_teachers_per_dept(dept : String) : Real
					+ popularity_rate_among_students() : Real
					+ popularity_rate_among_students_per_dept(dept : String) : Real
			}
    }

    package school
    {
        class Teaching
        {
            + hire_teachers(dept : String)
            + fire_teachers(dept : String)
            + populate()
        }

        class Study
        {
            + populate()
            + populate_promo(dept : String, year : Integer)
            + evaluate()
            + next_year()
        }
    }

    package management
    {
        class Financing
        {
            + finance(dept : String)
            + finance(dept : String, destination : String)
            + finance(destination : String)
            + update_budget()
        }

        abstract class Action
        {
            + planify_action()
        }

        class Planified
        {
            + planify_for_next_year()
        }

        class Urgent
        {
            + respond_to_urgent()
        }
    }

		class Scenario
		{
				+ get_scenario() : Integer[0..2]
				+ set_scenario(n : Integer[0..2])
				+ adjust_budget(coeff : Real)
				+ adjust_student_satisfaction(coeff : Real)
				+ adjust_teacher_satisfaction(coeff : Real)
				+ adjust_call_probability(call : Integer, coeff : Real)
				+ adjust_dept_state(dept: String, coeff : Real)
		}
}

package models
{
		package human {
				class Student
				{
						+ add_student(dept : String)
						+ rm_student(id : Integer)
						+ rm_students_by_dept(dept : String, nb : Integer)
						+ get_year(id : Integer) : Integer
						+ get_dept(id : Integer) : String
						+ get_mood(id : Integer) : Real
						+ get_level(id : Integer) : Real
						+ set_year(id : Integer, year : Integer)
						+ set_mood(id : Integer, coeff : Real)
						+ set_level(id : Integer, coeff : Real)
						+ compute_nb_per_dept(dept : String) : Real
						+ avg_mood_per_dept(dept : String) : Real
						+ compute_nb() : Real
						+ avg_mood() : Real
						+ success_rate_per_dept(dept : String) : Real
						+ success_rate() : Real
				}

				class Teacher
				{
						+ add_teacher(dept : String, full_time : Boolean)
						+ rm_teacher(id : Integer)
						+ rm_teachers_by_dept(dept : String, nb : Integer)
						+ get_dept(id : Integer) : String
						+ get_mood(id : Integer) : Real
						+ get_if_fulltime(id : Integer) : Boolean
						+ set_mood(id : Integer, coeff : Real)
						+ set_fulltime(id : Integer, status : Boolean)
						+ compute_nb_per_dept(dept : String) : Real
						+ avg_mood_per_dept(dept : String) : Real
						+ compute_nb() : Real
						+ avg_mood() : Real
				}
    }

		package material {
			abstract class Building
			{
				- age : Integer
				- isolation : Integer
				- surface : Integer
				- heating : Boolean
				- maintenance_agents_nb : Integer
				+ get_code() : String
			}

			class IT
			{
				+ <<create>> IT()
				+ it_func()
			}

			class Communication
			{
				+ <<create>> Communication()
				+ communication_func()
			}

			class Marketing
			{
				+ <<create>> Marketing()
				+ marketing_func()
			}

			class Chemistry
			{
				+ <<create>> Chemistry()
				+ chemistry_func()
			}

			class Engineering
			{
				+ <<create>> Engineering()
				+ engineering_func()
			}

			class Fund
			{
				+ add_fund(source : String, amount : Real, destination : String?, time : Integer)
				+ rm_fund_by_id(i : Integer)
			    + rm_fund_by_source(source : String)
				+ get_source(id : Integer) : String
				+ get_amount(id : Integer) : Real
				+ get_area(id : Integer) : String?
				+ get time(id : Integer) : Integer
				+ set_area(id : Integer, dest : String)
				+ set_time(id : Integer, time : Integer)
				+ total() : Real
				+ total_per_dept(dept : String) : Real
				+ inflation_adjusted(indexation_rate : Real)
				+ normal_inflation_adjusted()
				+ check_availability(amount : Real, dest : String) : Boolean
				+ forecast() : Real
			}

			class Call
			{
				+ get_message(id : Integer) : String
				+ get_duration(id : Integer) : Integer
				+ get_if_reproductible(id : Integer) : Boolean
				+ get_if_needs_action(id : Integer) : Boolean
				+ get_area(id : Integer) : String
				+ set_area(id : Integer, another_place : String)
			}
    }

        class Students
        {
            + id : Integer <<PK>>
            + year : Integer [1..3]
            + dept : String
            + mood : Real [0, 1]
            + level : Real [0, 1]
        }

        class Teachers
        {
            + id : Integer <<PK>>
            + dept : String
            + mood : Real [0, 1]
            + full-time : Boolean
        }

        class Funds
        {
            + id : Integer <<PK>>
            + amount : Real
            + source : String
            + area : String
            + time : Integer
        }

        class Notifications
        {
            + id : Integer <<PK>>
            + message : String
            + duration : Integer
            + is_reproductible : Boolean
            + needs_action : Boolean
            + area : String
        }

        class Depts
        {
            + id : Integer <<PK>>
            + name : String
        }

        class Sources
        {
            + id : Integer <<PK>>
            + name : String
        }
}


RenovIUTApp ...> views
RenovIUTApp .> Glob
BuildingView ...> Building
Stats ....> models
GameOver ..> Vote
Study ..> Student
Teaching ..> Teacher
Financing ..> Fund
Action *---> Building
Student ..> Students
Teacher ..> Teachers
Fund ....> Funds
Call ....> Notifications
Teachers ..> Depts
Students ..> Depts
Funds ..> Depts
Notifications ..> Depts
Funds ..> Sources
Reaction o--> Action

Building --|> IT
Building --|> Communication
Building --|> Marketing
Building --|> Chemistry
Building --|> Engineering
Action -|> Urgent
Action -|> Planified
Action *--> Call

TimeManagement *--> Scenario
Financing ..> Scenario
Menu ..> Scenario

Glob *--> DBManager

@enduml
